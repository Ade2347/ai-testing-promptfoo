{"version":3,"file":"vendor-markdown-B8e324Vh.js","sources":["../../../../node_modules/estree-util-is-identifier-name/lib/index.js","../../../../node_modules/hast-util-whitespace/lib/index.js","../../../../node_modules/property-information/lib/util/schema.js","../../../../node_modules/property-information/lib/util/merge.js","../../../../node_modules/property-information/lib/normalize.js","../../../../node_modules/property-information/lib/util/info.js","../../../../node_modules/property-information/lib/util/types.js","../../../../node_modules/property-information/lib/util/defined-info.js","../../../../node_modules/property-information/lib/util/create.js","../../../../node_modules/property-information/lib/aria.js","../../../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../../../node_modules/property-information/lib/html.js","../../../../node_modules/property-information/lib/svg.js","../../../../node_modules/property-information/lib/xlink.js","../../../../node_modules/property-information/lib/xmlns.js","../../../../node_modules/property-information/lib/xml.js","../../../../node_modules/property-information/lib/hast-to-react.js","../../../../node_modules/property-information/lib/find.js","../../../../node_modules/property-information/index.js","../../../../node_modules/style-to-object/cjs/index.js","../../../../node_modules/inline-style-parser/index.js","../../../../node_modules/style-to-js/cjs/utilities.js","../../../../node_modules/style-to-js/cjs/index.js","../../../../node_modules/unist-util-position/lib/index.js","../../../../node_modules/unist-util-stringify-position/lib/index.js","../../../../node_modules/vfile-message/lib/index.js","../../../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../../../node_modules/comma-separated-tokens/index.js","../../../../node_modules/space-separated-tokens/index.js","../../../../node_modules/html-url-attributes/lib/index.js","../../../../node_modules/mdast-util-to-string/lib/index.js","../../../../node_modules/decode-named-character-reference/index.dom.js","../../../../node_modules/micromark-util-chunked/index.js","../../../../node_modules/micromark-util-combine-extensions/index.js","../../../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../../../node_modules/micromark-util-normalize-identifier/index.js","../../../../node_modules/micromark-util-sanitize-uri/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-util-sanitize-uri/index.js","../../../../node_modules/micromark/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark/lib/initialize/content.js","../../../../node_modules/micromark/lib/initialize/document.js","../../../../node_modules/micromark-util-classify-character/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-util-classify-character/index.js","../../../../node_modules/micromark-util-resolve-all/index.js","../../../../node_modules/micromark-core-commonmark/lib/attention.js","../../../../node_modules/micromark-core-commonmark/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-core-commonmark/lib/autolink.js","../../../../node_modules/micromark-core-commonmark/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../../../node_modules/micromark-core-commonmark/lib/code-text.js","../../../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../../../node_modules/micromark-util-subtokenize/index.js","../../../../node_modules/micromark-core-commonmark/lib/content.js","../../../../node_modules/micromark-factory-destination/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-factory-destination/index.js","../../../../node_modules/micromark-factory-label/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-factory-label/index.js","../../../../node_modules/micromark-factory-title/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-factory-title/index.js","../../../../node_modules/micromark-factory-title/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark-factory-whitespace/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-factory-whitespace/index.js","../../../../node_modules/micromark-factory-whitespace/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark-core-commonmark/lib/definition.js","../../../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../../../node_modules/micromark-util-html-tag-name/index.js","../../../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../../../node_modules/micromark-core-commonmark/lib/html-text.js","../../../../node_modules/micromark-core-commonmark/lib/label-end.js","../../../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../../../node_modules/micromark-core-commonmark/lib/list.js","../../../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../../../node_modules/micromark/lib/initialize/flow.js","../../../../node_modules/micromark/lib/initialize/text.js","../../../../node_modules/micromark/lib/constructs.js","../../../../node_modules/micromark/lib/create-tokenizer.js","../../../../node_modules/micromark/lib/preprocess.js","../../../../node_modules/micromark-util-decode-string/index.js","../../../../node_modules/mdast-util-from-markdown/lib/index.js","../../../../node_modules/micromark/lib/postprocess.js","../../../../node_modules/micromark/lib/parse.js","../../../../node_modules/remark-parse/lib/index.js","../../../../node_modules/mdast-util-to-hast/lib/revert.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../../../node_modules/trim-lines/index.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../../../node_modules/@ungap/structured-clone/esm/types.js","../../../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../../../node_modules/@ungap/structured-clone/esm/serialize.js","../../../../node_modules/@ungap/structured-clone/esm/index.js","../../../../node_modules/mdast-util-to-hast/lib/footer.js","../../../../node_modules/unist-util-is/lib/index.js","../../../../node_modules/unist-util-visit-parents/lib/index.js","../../../../node_modules/unist-util-visit/lib/index.js","../../../../node_modules/mdast-util-to-hast/lib/state.js","../../../../node_modules/mdast-util-to-hast/lib/index.js","../../../../node_modules/remark-rehype/lib/index.js","../../../../node_modules/bail/index.js","../../../../node_modules/extend/index.js","../../../../node_modules/unified/node_modules/is-plain-obj/index.js","../../../../node_modules/trough/lib/index.js","../../../../node_modules/vfile/lib/minpath.browser.js","../../../../node_modules/vfile/lib/minproc.browser.js","../../../../node_modules/vfile/lib/minurl.shared.js","../../../../node_modules/vfile/lib/minurl.browser.js","../../../../node_modules/vfile/lib/index.js","../../../../node_modules/unified/lib/callable-instance.js","../../../../node_modules/unified/lib/index.js","../../../../node_modules/react-markdown/lib/index.js","../../../../node_modules/ccount/index.js","../../../../node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../../../../node_modules/mdast-util-find-and-replace/lib/index.js","../../../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../../../node_modules/markdown-table/index.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../../../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../../../node_modules/mdast-util-phrasing/lib/index.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../../../node_modules/longest-streak/index.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../../../node_modules/mdast-util-gfm-table/lib/index.js","../../../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../../../node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../../../node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-extension-gfm-table/node_modules/micromark-factory-space/index.js","../../../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../../../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","../../../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../../../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-factory-space/index.js","../../../../node_modules/remark-gfm/lib/index.js","../../../../node_modules/micromark-extension-gfm/index.js","../../../../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {createElement, useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    /* c8 ignore next 7 -- hooks are client-only. */\n    function () {\n      const file = createFile(options)\n      processor.run(processor.parse(file), file, function (error, tree) {\n        setError(error)\n        setTree(tree)\n      })\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  /* c8 ignore next -- hooks are client-only. */\n  if (error) throw error\n\n  /* c8 ignore next -- hooks are client-only. */\n  return tree ? post(tree, options) : createElement(Fragment)\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  // Wrap in `div` if there’s a class name.\n  if (options.className) {\n    tree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className: options.className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        tree.type === 'root' ? tree.children : [tree]\n      )\n    }\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n"],"names":["nameRe","nameReJsx","emptyOptions","name","options","re","jsx","test","empty","value","replace","Schema","constructor","property","normal","space","this","merge","definitions","definition","Object","assign","normalize","toLowerCase","prototype","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","types","DefinedInfo","mask","index","super","mark","length","check","values","key","create","properties","normals","entries","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","slice","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","src","srcDoc","srcLang","srcSet","start","step","style","tabIndex","target","title","translate","type","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","hastToReact","cap","dash","valid","kebab","$0","camelcase","charAt","toUpperCase","htmlBase","svgBase","__importDefault","mod","__esModule","defineProperty","cjs","iterator","styleObject","declarations","inline_style_parser_1","hasIterator","forEach","declaration","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","inlineStyleParser","TypeError","lineno","column","updatePosition","lines","match","i","lastIndexOf","position","line","node","Position","whitespace","source","error","msg","err","Error","reason","filename","silent","m","exec","comments","c","comment","push","pos","prop","val","ret","decl","decls","require$$0","utilities","camelCase","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","trimHyphen","concat","skipCamelCase","reactCompat","style_to_object_1","utilities_1","require$$1","StyleToJS","output","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","hasOwnProperty","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","Array","isArray","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","call","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToJs","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","urlAttributes","icon","toString","includeImageAlt","includeHtml","all","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","charCodeAt","splice","remove","items","parameters","chunkStart","unshift","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","decodeNumericCharacterReference","base","parseInt","fromCodePoint","normalizeIdentifier","asciiAlphanumeric","regex","fromCharCode","normalizeUri","skip","next","encodeURIComponent","markdownLineEnding","markdownSpace","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","_tokenizer","flowContinue","writeToChild","endOfFile","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","unicodePunctuation","regexCheck","unicodeWhitespace","classifyCharacter","markdownLineEndingOrSpace","resolveAll","context","called","resolve","attention","group","openingSequence","closingSequence","use","nextEvents","_close","_open","sliceSerialize","movePoint","insideSpan","attentionMarkers","marker","inside","after","close","_bufferIndex","asciiAlpha","asciiAtext","asciiDigit","asciiHexDigit","asciiPunctuation","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","emailLabel","emailValue","blankLine","partial","blockQuote","contBefore","_container","characterEscape","numeric","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","tailExitIndex","headEnterIndex","between","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","deleteCount","Math","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","_contentTypeTextTrailing","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","resolveTo","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","newEvents","_inactive","_balanced","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","setextUnderline","heading","paragraph","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","extraResolver","chunks","tabs","bufferIndex","chunk","_index","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","env","globalThis","deserialize","serialized","$","out","unpair","arr","Date","flags","RegExp","BigInt","Uint8Array","DataView","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","toISOString","serializer","structuredClone$1","structuredClone","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","hasOwn","toStr","gOPD","getOwnPropertyDescriptor","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","enumerable","configurable","newValue","writable","getProperty","extend","copy","copyIsArray","clone","arguments","deep","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","assertPath$1","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","rehypePlugins","remarkPlugins","remarkRehypeOptions","createProcessor","createFile","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","post","colon","questionMark","numberSign","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","literalWithBreak","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206]}